angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,e){t.currentUser=e,console.log("login heard",e,t.currentUser)})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(t,o,e){t.login=function(n,r){o.login(n,r).then(function(o){t.$emit("login",o),e.path("/")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,o){console.log("PostsCtrl controller"),t.addPost=function(){t.postBody&&o.create({username:"gillyspy",body:t.postBody}).success(function(o){t.posts.unshift(o),t.postBody=null})},o.fetch().success(function(o){t.posts=o})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").config(["$routeProvider","$locationProvider",function(t,o){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/posts",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).otherwise({redirectTo:"/"}),o.html5Mode(!0)}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(e){return o.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,o.getUser()})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
