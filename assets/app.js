angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,e){t.currentUser=e,console.log("login heard",e,t.currentUser)})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(t,o,e){t.login=function(n,r){o.login(n,r).then(function(o){t.$emit("login",o),e.path("/")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,o){console.log("PostsCtrl controller"),t.addPost=function(){t.postBody&&o.create({username:"gillyspy",body:t.postBody}).success(function(o){t.posts.unshift(o),t.postBody=null})},o.fetch().success(function(o){t.posts=o})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).otherwise({redirectTo:"/register"})}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users").then(function(t){return t.data})},o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(e){return o.token=e.data,t.defaults.headers.common["X-Auth"]=e.data,o.getUser()})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJvdXRlcy5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsImNvbnNvbGUiLCJsb2ciLCJVc2VyU3ZjIiwiJGxvY2F0aW9uIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsIiRlbWl0IiwicGF0aCIsIlBvc3RzU3ZjIiwiYWRkUG9zdCIsInBvc3RCb2R5IiwiY3JlYXRlIiwiYm9keSIsInN1Y2Nlc3MiLCJwb3N0IiwicG9zdHMiLCJ1bnNoaWZ0IiwiZmV0Y2giLCJzZXJ2aWNlIiwiJGh0dHAiLCJ0aGlzIiwiZ2V0IiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwic3ZjIiwiZ2V0VXNlciIsInJlc3BvbnNlIiwiZGF0YSIsInRva2VuIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIl0sIm1hcHBpbmdzIjoiQUFDQUEsUUFBQUMsT0FBQSxPQUNBLFlDRkFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLElBQUEsUUFBQSxTQUFBQyxFQUFBQyxHQUdBSCxFQUFBSSxZQUFBRCxFQUNBRSxRQUFBQyxJQUFBLGNBQUFILEVBQUFILEVBQUFJLGtCQ05BUCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsWUFBQSxTQUFBQyxFQUFBTyxFQUFBQyxHQUNBUixFQUFBUyxNQUFBLFNBQUFDLEVBQUFDLEdBQ0FKLEVBQ0FFLE1BQUFDLEVBQUFDLEdBQ0FDLEtBQUEsU0FBQVQsR0FFQUgsRUFBQWEsTUFBQSxRQUFBVixHQUNBSyxFQUFBTSxLQUFBLFdDUEFqQixRQUNBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFdBQUEsU0FBQUMsRUFBQWUsR0FDQVYsUUFBQUMsSUFBQSx3QkFDQU4sRUFBQWdCLFFBQUEsV0FDQWhCLEVBQUFpQixVQUNBRixFQUFBRyxRQUNBUixTQUFBLFdBQ0FTLEtBQUFuQixFQUFBaUIsV0FDQUcsUUFBQSxTQUFBQyxHQUNBckIsRUFBQXNCLE1BQUFDLFFBQUFGLEdBQ0FyQixFQUFBaUIsU0FBQSxRQU9BRixFQUFBUyxRQUNBSixRQUFBLFNBQUFFLEdBQ0F0QixFQUFBc0IsTUFBQUEsT0NwQkF6QixRQUFBQyxPQUFBLE9BQ0EyQixRQUFBLFlBQUEsUUFBQSxTQUFBQyxHQUdBQyxLQUFBSCxNQUFBLFdBQ0EsTUFBQUUsR0FBQUUsSUFBQSxlQUlBRCxLQUFBVCxPQUFBLFNBQUFHLEdBQ0EsTUFBQUssR0FBQUwsS0FBQSxhQUFBQSxPQ1hBeEIsUUFBQUMsT0FBQSxPQUNBK0IsUUFFQSxpQkFDQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQ0FoQyxXQUFBLFlBQ0FpQyxZQUFBLGVBRUFELEtBQUEsYUFDQWhDLFdBQUEsZUFDQWlDLFlBQUEsa0JBRUFELEtBQUEsVUFDQWhDLFdBQUEsWUFDQWlDLFlBQUEsZUFFQUMsV0FDQUMsV0FBQSxpQkNuQkFyQyxRQUFBQyxPQUFBLE9BQ0EyQixRQUFBLFdBQUEsUUFBQSxTQUFBQyxHQUNBLEdBQUFTLEdBQUFSLElBQ0FRLEdBQUFDLFFBQUEsV0FDQSxNQUFBVixHQUFBRSxJQUFBLGNBQ0FoQixLQUFBLFNBQUF5QixHQUNBLE1BQUFBLEdBQUFDLFFBSUFILEVBQUExQixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQWUsR0FBQUwsS0FBQSxpQkFDQVgsU0FBQUEsRUFDQUMsU0FBQUEsSUFFQUMsS0FBQSxTQUFBeUIsR0FLQSxNQUpBRixHQUFBSSxNQUFBRixFQUFBQyxLQUdBWixFQUFBYyxTQUFBQyxRQUFBQyxPQUFBLFVBQUFMLEVBQUFDLEtBQ0FILEVBQUFDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vaW5zdGFudGlhdGUgdGhlIGRlY2xhcmVkIGFuZ3VsYXIgYXBwXG5hbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuICAgICduZ1JvdXRlJ1xuXSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0FwcGxpY2F0aW9uQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXywgdXNlcikge1xuXG4gICAgICAgICAgICAvLyBvbiBsb2dpbiBnZXQgdGhlIGJ1YmJsZWQgdXAgdXNlciBcbiAgICAgICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IHVzZXI7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbG9naW4gaGVhcmQnLCB1c2VyLCAkc2NvcGUuY3VycmVudFVzZXIpO1xuICAgICAgICB9KTtcbiAgICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2YywgJGxvY2F0aW9uKSB7XG4gICAgICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIFVzZXJTdmNcbiAgICAgICAgICAgICAgICAubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKSAvL2xvZ2luIG5vdyByZXR1cm5zIHRoZSBkYXRhO1xuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1YmJsZSB1cCB0aGUgbG9nZ2VkIGluIHJlc3BvbnNlIGluZm8gKEFwcGxpY2F0aW9uIGNvbnRyb2xsZXIgd2lsbCBsaXN0ZW4gZm9yIGl0KVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgdXNlcik7XG4gICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfSk7XG4iLCIvLyBjcmVhdGUgYSBjb250cm9sbGVyIGFuZCBpbmplY3Qgb3VyIHNlcnZpY2VcbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBQb3N0c1N2Yykge1xuICAgICAgICBjb25zb2xlLmxvZygnUG9zdHNDdHJsIGNvbnRyb2xsZXInKTtcbiAgICAgICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICAgICAgICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdnaWxseXNweScsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxuICAgICAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSkgLy8gc3VjY2Vzc1xuICAgICAgICAgICAgfSAvLyBlbmRpZjtcbiAgICAgICAgfSAvLyBlbmQgYWRkUG9zdDtcbiAgICAgICAgO1xuXG4gICAgICAgIC8vIHZpYSBBUEkgc2VydmljZVxuICAgICAgICBQb3N0c1N2Yy5mZXRjaCgpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMgPSBwb3N0cztcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcblxuICAgIH0pXG47IC8vIGVuZCBjb250cm9sbGVyXG5cbiIsIi8vIG5nIHNlcnZpY2UgZm9yIGxvYWRpbmcgcG9zdHNcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuXG4gICAgICAgIC8vIGFkZCBhIGZldGNoIG1ldGhvZCB0byBvdXIgc2VydmljZVxuICAgICAgICB0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpO1xuICAgICAgICB9OyAvLyBmZXRjaDtcblxuICAgICAgICAvLyBhZGQgYSBjcmVhdGUgbWV0aG9kIHRvIG91ciBzZXJ2aWNlXG4gICAgICAgIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XG4gICAgICAgIH07IC8vY3JlYXRlO1xuICAgICAgICBcbiAgICB9KTsvLyBzZXJ2aWNlKClcblxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29uZmlnKFxuICAgICAgICBbXG4gICAgICAgICAgICAnJHJvdXRlUHJvdmlkZXInLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgICAgICAgICAgLndoZW4oJy8nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUG9zdHNDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgfSkgLy8gcm9vdFxuICAgICAgICAgICAgICAgICAgICAud2hlbignL3JlZ2lzdGVyJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnXG4gICAgICAgICAgICAgICAgICAgIH0pIC8vIHJlZ2lzdGVyXG4gICAgICAgICAgICAgICAgICAgIC53aGVuKCcvbG9naW4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTG9naW5DdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm90aGVyd2lzZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiAnL3JlZ2lzdGVyJ1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDsvLyBkZWZhdWx0IGlzIHJvb3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICk7IC8vIGNvbmZpZztcbi8vbW9kdWxlIDsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgICAgICB2YXIgc3ZjID0gdGhpcztcbiAgICAgICAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGFcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBzdmMudG9rZW4gPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAvLyBzZW5kIHVwIHRoZSBYLWF1dGggcmVxdWVzdCBvbiBBTEwgcmVxdWVzdHNcbiAgICAgICAgICAgICAgICAgICAgLy9OT1RFOiBJIGRvbid0IHVuZGVyc3RhbmQgeWV0IGhvdyB0aGlzIGlzIHJlbGV2YW50IHRvIGFsbCByZXF1ZXN0cyB5ZXRcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtQXV0aCddID0gcmVzcG9uc2UuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN2Yy5nZXRVc2VyKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KVxuOyJdfQ==
