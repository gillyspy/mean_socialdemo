angular.module("app",["ngRoute"]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(t,o){e.login(t,o).then(function(t){console.log("print out the user",t)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){console.log("PostsCtrl controller"),t.addPost=function(){t.postBody&&e.create({username:"gillyspy",body:t.postBody}).success(function(e){t.posts.unshift(e),t.postBody=null})},e.fetch().success(function(e){t.posts=e})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).otherwise({redirectTo:"/register"})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users",{headers:{"X-Auth":this.token}})},e.login=function(o,n){return t.post("/api/sessions",{username:o,password:n}).then(function(t){return e.token=t.data,e.getUser()})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImxvZ2luLmN0cmwuanMiLCJwb3N0cy5jdHJsLmpzIiwicG9zdHMuc3ZjLmpzIiwicm91dGVzLmpzIiwidXNlci5zdmMuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCJVc2VyU3ZjIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInVzZXIiLCJjb25zb2xlIiwibG9nIiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJzdmMiLCJnZXRVc2VyIiwiaGVhZGVycyIsIlgtQXV0aCIsInRva2VuIiwidmFsIiwiZGF0YSJdLCJtYXBwaW5ncyI6IkFBQ0FBLFFBQUFDLE9BQUEsT0FDQSxZQ0ZBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUMsR0FDQUQsRUFBQUUsTUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBQyxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBRUFDLFFBQUFDLElBQUEscUJBQUFGLFNDTEFULFFBQ0FDLE9BQUEsT0FDQUMsV0FBQSxhQUFBLFNBQUEsV0FBQSxTQUFBQyxFQUFBUyxHQUNBRixRQUFBQyxJQUFBLHdCQUNBUixFQUFBVSxRQUFBLFdBQ0FWLEVBQUFXLFVBQ0FGLEVBQUFHLFFBQ0FULFNBQUEsV0FDQVUsS0FBQWIsRUFBQVcsV0FDQUcsUUFBQSxTQUFBQyxHQUNBZixFQUFBZ0IsTUFBQUMsUUFBQUYsR0FDQWYsRUFBQVcsU0FBQSxRQU9BRixFQUFBUyxRQUNBSixRQUFBLFNBQUFFLEdBQ0FoQixFQUFBZ0IsTUFBQUEsT0NwQkFuQixRQUFBQyxPQUFBLE9BQ0FxQixRQUFBLFlBQUEsUUFBQSxTQUFBQyxHQUdBQyxLQUFBSCxNQUFBLFdBQ0EsTUFBQUUsR0FBQUUsSUFBQSxlQUlBRCxLQUFBVCxPQUFBLFNBQUFHLEdBQ0EsTUFBQUssR0FBQUwsS0FBQSxhQUFBQSxPQ1hBbEIsUUFBQUMsT0FBQSxPQUNBeUIsUUFFQSxpQkFDQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQ0ExQixXQUFBLFlBQ0EyQixZQUFBLGVBRUFELEtBQUEsYUFDQTFCLFdBQUEsZUFDQTJCLFlBQUEsa0JBRUFELEtBQUEsVUFDQTFCLFdBQUEsWUFDQTJCLFlBQUEsZUFFQUMsV0FDQUMsV0FBQSxpQkNuQkEvQixRQUFBQyxPQUFBLE9BQ0FxQixRQUFBLFdBQUEsUUFBQSxTQUFBQyxHQUNBLEdBQUFTLEdBQUFSLElBQ0FRLEdBQUFDLFFBQUEsV0FDQSxNQUFBVixHQUFBRSxJQUFBLGNBQ0FTLFNBQUFDLFNBQUFYLEtBQUFZLFVBR0FKLEVBQUEzQixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQWdCLEdBQUFMLEtBQUEsaUJBQ0FaLFNBQUFBLEVBQ0FDLFNBQUFBLElBRUFDLEtBQUEsU0FBQTZCLEdBRUEsTUFEQUwsR0FBQUksTUFBQUMsRUFBQUMsS0FDQU4sRUFBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbnN0YW50aWF0ZSB0aGUgZGVjbGFyZWQgYW5ndWxhciBhcHBcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICAgJ25nUm91dGUnXG5dKTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclN2Yykge1xuICAgICAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICBVc2VyU3ZjLmxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICAvL1RPRE86IGRvIG1vcmUgdGhhbiBwcmludCBvdXQgdGhlIHVzZXJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ByaW50IG91dCB0aGUgdXNlcicsIHVzZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH0pO1xuIiwiLy8gY3JlYXRlIGEgY29udHJvbGxlciBhbmQgaW5qZWN0IG91ciBzZXJ2aWNlXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgUG9zdHNTdmMpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1Bvc3RzQ3RybCBjb250cm9sbGVyJyk7XG4gICAgICAgICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCRzY29wZS5wb3N0Qm9keSkge1xuICAgICAgICAgICAgICAgIFBvc3RzU3ZjLmNyZWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiAnZ2lsbHlzcHknLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucG9zdEJvZHkgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0pIC8vIHN1Y2Nlc3NcbiAgICAgICAgICAgIH0gLy8gZW5kaWY7XG4gICAgICAgIH0gLy8gZW5kIGFkZFBvc3Q7XG4gICAgICAgIDtcblxuICAgICAgICAvLyB2aWEgQVBJIHNlcnZpY2VcbiAgICAgICAgUG9zdHNTdmMuZmV0Y2goKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3RzKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RzID0gcG9zdHM7XG4gICAgICAgICAgICB9KVxuICAgICAgICA7XG5cbiAgICB9KVxuOyAvLyBlbmQgY29udHJvbGxlclxuXG4iLCIvLyBuZyBzZXJ2aWNlIGZvciBsb2FkaW5nIHBvc3RzXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbiAoJGh0dHApIHtcblxuICAgICAgICAvLyBhZGQgYSBmZXRjaCBtZXRob2QgdG8gb3VyIHNlcnZpY2VcbiAgICAgICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKTtcbiAgICAgICAgfTsgLy8gZmV0Y2g7XG5cbiAgICAgICAgLy8gYWRkIGEgY3JlYXRlIG1ldGhvZCB0byBvdXIgc2VydmljZVxuICAgICAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpO1xuICAgICAgICB9OyAvL2NyZWF0ZTtcbiAgICAgICAgXG4gICAgfSk7Ly8gc2VydmljZSgpXG5cblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbmZpZyhcbiAgICAgICAgW1xuICAgICAgICAgICAgJyRyb3V0ZVByb3ZpZGVyJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcikge1xuICAgICAgICAgICAgICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgICAgICAgICAgICAgIC53aGVuKCcvJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnXG4gICAgICAgICAgICAgICAgICAgIH0pIC8vIHJvb3RcbiAgICAgICAgICAgICAgICAgICAgLndoZW4oJy9yZWdpc3RlcicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdSZWdpc3RlckN0cmwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJ1xuICAgICAgICAgICAgICAgICAgICB9KSAvLyByZWdpc3RlclxuICAgICAgICAgICAgICAgICAgICAud2hlbignL2xvZ2luJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0xvZ2luQ3RybCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5vdGhlcndpc2Uoe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3RUbzogJy9yZWdpc3RlcidcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA7Ly8gZGVmYXVsdCBpcyByb290XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICApOyAvLyBjb25maWc7XG4vL21vZHVsZSA7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLnNlcnZpY2UoJ1VzZXJTdmMnLCBmdW5jdGlvbiAoJGh0dHApIHtcbiAgICAgICAgdmFyIHN2YyA9IHRoaXM7XG4gICAgICAgIHN2Yy5nZXRVc2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7J1gtQXV0aCc6IHRoaXMudG9rZW59XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgc3ZjLmxvZ2luID0gZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCB7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHN2Yy50b2tlbiA9IHZhbC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3ZjLmdldFVzZXIoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pXG47Il19
