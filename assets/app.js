angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(o,e){t.currentUser=e})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,o){t.login=function(e,n){o.login(e,n).then(function(o){t.$emit("login",o.data)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,o){console.log("PostsCtrl controller"),t.addPost=function(){t.postBody&&o.create({username:"gillyspy",body:t.postBody}).success(function(o){t.posts.unshift(o),t.postBody=null})},o.fetch().success(function(o){t.posts=o})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).otherwise({redirectTo:"/register"})}]),angular.module("app").service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users",{headers:{"X-Auth":this.token}})},o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(t){return o.token=t.data,o.getUser()})}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJvdXRlcy5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ0aGVuIiwicmVzcG9uc2UiLCIkZW1pdCIsImRhdGEiLCJQb3N0c1N2YyIsImNvbnNvbGUiLCJsb2ciLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJzdmMiLCJnZXRVc2VyIiwiaGVhZGVycyIsIlgtQXV0aCIsInRva2VuIiwidmFsIl0sIm1hcHBpbmdzIjoiQUFDQUEsUUFBQUMsT0FBQSxPQUNBLFlDRkFELFFBQUFDLE9BQUEsT0FDQUMsV0FBQSxtQkFBQSxTQUFBLFNBQUFDLEdBQ0FBLEVBQUFDLElBQUEsUUFBQSxTQUFBQyxFQUFBQyxHQUVBSCxFQUFBSSxZQUFBRCxPQ0pBTixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsYUFBQSxTQUFBLFVBQUEsU0FBQUMsRUFBQUssR0FDQUwsRUFBQU0sTUFBQSxTQUFBQyxFQUFBQyxHQUNBSCxFQUFBQyxNQUFBQyxFQUFBQyxHQUNBQyxLQUFBLFNBQUFDLEdBR0FWLEVBQUFXLE1BQUEsUUFBQUQsRUFBQUUsWUNOQWYsUUFDQUMsT0FBQSxPQUNBQyxXQUFBLGFBQUEsU0FBQSxXQUFBLFNBQUFDLEVBQUFhLEdBQ0FDLFFBQUFDLElBQUEsd0JBQ0FmLEVBQUFnQixRQUFBLFdBQ0FoQixFQUFBaUIsVUFDQUosRUFBQUssUUFDQVgsU0FBQSxXQUNBWSxLQUFBbkIsRUFBQWlCLFdBQ0FHLFFBQUEsU0FBQUMsR0FDQXJCLEVBQUFzQixNQUFBQyxRQUFBRixHQUNBckIsRUFBQWlCLFNBQUEsUUFPQUosRUFBQVcsUUFDQUosUUFBQSxTQUFBRSxHQUNBdEIsRUFBQXNCLE1BQUFBLE9DcEJBekIsUUFBQUMsT0FBQSxPQUNBMkIsUUFBQSxZQUFBLFFBQUEsU0FBQUMsR0FHQUMsS0FBQUgsTUFBQSxXQUNBLE1BQUFFLEdBQUFFLElBQUEsZUFJQUQsS0FBQVQsT0FBQSxTQUFBRyxHQUNBLE1BQUFLLEdBQUFMLEtBQUEsYUFBQUEsT0NYQXhCLFFBQUFDLE9BQUEsT0FDQStCLFFBRUEsaUJBQ0EsU0FBQUMsR0FDQUEsRUFDQUMsS0FBQSxLQUNBaEMsV0FBQSxZQUNBaUMsWUFBQSxlQUVBRCxLQUFBLGFBQ0FoQyxXQUFBLGVBQ0FpQyxZQUFBLGtCQUVBRCxLQUFBLFVBQ0FoQyxXQUFBLFlBQ0FpQyxZQUFBLGVBRUFDLFdBQ0FDLFdBQUEsaUJDbkJBckMsUUFBQUMsT0FBQSxPQUNBMkIsUUFBQSxXQUFBLFFBQUEsU0FBQUMsR0FDQSxHQUFBUyxHQUFBUixJQUNBUSxHQUFBQyxRQUFBLFdBQ0EsTUFBQVYsR0FBQUUsSUFBQSxjQUNBUyxTQUFBQyxTQUFBWCxLQUFBWSxVQUdBSixFQUFBN0IsTUFBQSxTQUFBQyxFQUFBQyxHQUNBLE1BQUFrQixHQUFBTCxLQUFBLGlCQUNBZCxTQUFBQSxFQUNBQyxTQUFBQSxJQUVBQyxLQUFBLFNBQUErQixHQUVBLE1BREFMLEdBQUFJLE1BQUFDLEVBQUE1QixLQUNBdUIsRUFBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbnN0YW50aWF0ZSB0aGUgZGVjbGFyZWQgYW5ndWxhciBhcHBcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICAgJ25nUm91dGUnXG5dKTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignQXBwbGljYXRpb25DdHJsJywgZnVuY3Rpb24gKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUuJG9uKCdsb2dpbicsIGZ1bmN0aW9uIChfLCB1c2VyKSB7XG4gICAgICAgICAgICAvLyBvbiBsb2dpbiBnZXQgdGhlIGJ1YmJsZWQgdXAgdXNlciBcbiAgICAgICAgICAgICRzY29wZS5jdXJyZW50VXNlciA9IHVzZXI7XG4gICAgICAgIH0pO1xuICAgIH0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdMb2dpbkN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBVc2VyU3ZjKSB7XG4gICAgICAgICRzY29wZS5sb2dpbiA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgICAgIFVzZXJTdmMubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1YmJsZSB1cCB0aGUgbG9nZ2VkIGluIHJlc3BvbnNlIGluZm8gKEFwcGxpY2F0aW9uIGNvbnRyb2xsZXIgd2lsbCBsaXN0ZW4gZm9yIGl0KVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoJ2xvZ2luJywgcmVzcG9uc2UuZGF0YSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfSk7XG4iLCIvLyBjcmVhdGUgYSBjb250cm9sbGVyIGFuZCBpbmplY3Qgb3VyIHNlcnZpY2VcbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCBQb3N0c1N2Yykge1xuICAgICAgICBjb25zb2xlLmxvZygnUG9zdHNDdHJsIGNvbnRyb2xsZXInKTtcbiAgICAgICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICAgICAgICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6ICdnaWxseXNweScsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6ICRzY29wZS5wb3N0Qm9keVxuICAgICAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdCk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfSkgLy8gc3VjY2Vzc1xuICAgICAgICAgICAgfSAvLyBlbmRpZjtcbiAgICAgICAgfSAvLyBlbmQgYWRkUG9zdDtcbiAgICAgICAgO1xuXG4gICAgICAgIC8vIHZpYSBBUEkgc2VydmljZVxuICAgICAgICBQb3N0c1N2Yy5mZXRjaCgpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbiAocG9zdHMpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdHMgPSBwb3N0cztcbiAgICAgICAgICAgIH0pXG4gICAgICAgIDtcblxuICAgIH0pXG47IC8vIGVuZCBjb250cm9sbGVyXG5cbiIsIi8vIG5nIHNlcnZpY2UgZm9yIGxvYWRpbmcgcG9zdHNcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuXG4gICAgICAgIC8vIGFkZCBhIGZldGNoIG1ldGhvZCB0byBvdXIgc2VydmljZVxuICAgICAgICB0aGlzLmZldGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpO1xuICAgICAgICB9OyAvLyBmZXRjaDtcblxuICAgICAgICAvLyBhZGQgYSBjcmVhdGUgbWV0aG9kIHRvIG91ciBzZXJ2aWNlXG4gICAgICAgIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24gKHBvc3QpIHtcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XG4gICAgICAgIH07IC8vY3JlYXRlO1xuICAgICAgICBcbiAgICB9KTsvLyBzZXJ2aWNlKClcblxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29uZmlnKFxuICAgICAgICBbXG4gICAgICAgICAgICAnJHJvdXRlUHJvdmlkZXInLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgICAgICAgICAgICAgLndoZW4oJy8nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUG9zdHNDdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncG9zdHMuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgfSkgLy8gcm9vdFxuICAgICAgICAgICAgICAgICAgICAud2hlbignL3JlZ2lzdGVyJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1JlZ2lzdGVyQ3RybCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnXG4gICAgICAgICAgICAgICAgICAgIH0pIC8vIHJlZ2lzdGVyXG4gICAgICAgICAgICAgICAgICAgIC53aGVuKCcvbG9naW4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTG9naW5DdHJsJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbG9naW4uaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLm90aGVyd2lzZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdFRvOiAnL3JlZ2lzdGVyJ1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDsvLyBkZWZhdWx0IGlzIHJvb3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgICk7IC8vIGNvbmZpZztcbi8vbW9kdWxlIDsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuc2VydmljZSgnVXNlclN2YycsIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgICAgICB2YXIgc3ZjID0gdGhpcztcbiAgICAgICAgc3ZjLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3VzZXJzJywge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsnWC1BdXRoJzogdGhpcy50b2tlbn1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBzdmMubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zZXNzaW9ucycsIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc3ZjLnRva2VuID0gdmFsLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdmMuZ2V0VXNlcigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSlcbjsiXX0=
